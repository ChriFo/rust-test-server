variables:
  CHANNEL: stable
  RUST_BACKTRACE: full
  RUST_TEST_THREADS: 1
pool:
  vmImage:  $[ variables['HOST_IMAGE'] ]
strategy:
  matrix:
    x86_64-pc-windows-msvc:
      HOST_IMAGE: vs2017-win2016
    x86_64-apple-darwin:
      HOST_IMAGE: macos-10.13
    x86_64-unknown-linux-gnu:
      HOST_IMAGE: ubuntu-16.04
      RUSTFLAGS: '-C link-dead-code'
steps:
  - powershell: Invoke-WebRequest -Uri https://win.rustup.rs/ -OutFile rustup-init.exe
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup [Windows]
  - script: |
      set TARGET=%SYSTEM_JOBDISPLAYNAME%
      rustup-init.exe -y --default-host %TARGET% --default-toolchain %CHANNEL%
      set PATH=%PATH%;%USERPROFILE%\.cargo\bin
      echo "##vso[task.setvariable variable=PATH;]%PATH%"
    condition: and(succeeded(), eq(variables['Agent.OS'],'Windows_NT'))
    displayName: Install toolchain [Windows]
  - script: |
      export TARGET=$SYSTEM_JOBDISPLAYNAME
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-host $TARGET --default-toolchain $CHANNEL
      export PATH=$PATH:~/.cargo/bin
      echo "##vso[task.setvariable variable=PATH;]$PATH"
    condition: and(succeeded(), ne(variables['Agent.OS'],'Windows_NT'))
    displayName: Install rustup and toolchain [Linux & OSX]
  - script: |
      rustc -V
      cargo -V
    displayName: Check rustc and cargo versions
  - script: |
      sudo apt-get update
      sudo apt-get install -y --fix-missing pkg-config
      sudo apt-get install -y binutils-dev build-essential cmake libcurl4-openssl-dev libdw-dev libiberty-dev ninja-build python zlib1g-dev
      wget https://github.com/SimonKagstrom/kcov/archive/$KCOV_TARBALL
      tar xzf $KCOV_TARBALL
      cd $KCOV_DIR
      mkdir build
      cd build
      cmake -G 'Ninja' ..
      cmake --build .
      sudo cmake --build . --target install
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Install kcov [Linux]
  - script: |
      rustup component add rustfmt-preview
      rustup component add clippy-preview
      cargo install cargo-audit
      cargo install cargo-kcov
      cargo install cargo-junit
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Install cargo plugins [Linux]
  - script: |
      cargo audit
      cargo fmt --all -- --check
      cargo clippy --all-targets -- -D warnings
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Run cargo audit, fmt and clippy
  - script: |
      cargo junit --name target/junit.xml
    displayName: Run cargo junit [Linux]
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
  - script: |
      cargo test --verbose --all -- --nocapture
    condition: and(succeeded(), ne(variables['Agent.OS'],'Linux'))
    displayName: Run cargo test [macOS & Windows]
  - script: |
      cargo-kcov kcov -v --no-clean-rebuild --all -o target/cov
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: Run cargo-kcov [Linux]
  - script: |
      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN)
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Publish coverage to Codecov'
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: 'junit.xml'
      searchFolder: $(Build.SourcesDirectory)/target/
    condition: and(succeeded(), eq(variables['Agent.OS'],'Linux'))
    displayName: 'Publish unit test results'
  - script: |
      cargo build --release
    displayName: Run cargo build
